buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

//Java Version
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

//Compile against UTF-8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

version = "1.0.5"
group = "net.alkalus.envirosound"
archivesBaseName = "EnviroSound"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

jar {
    archiveName = archivesBaseName + ".1.7.10-" + version + ".jar"
    classifier = 'main'
	manifest {
		attributes 'FMLCorePlugin': 'net.alkalus.envirosound.CoreModLoader'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
}

dependencies {
}

//Gradle Tweak
//Prevent java 8's strict doclint for javadocs from failing builds
allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

//Attach a version file to our mod
def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {        
        def propertiesFile = file "$generatedVersionDir/resources/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
		project.logger.lifecycle('Finished creating version file for ' + archivesBaseName)
    }
}

processResources.dependsOn generateVersionProperties
processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
				
		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
		
	// copy everything else except the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
	project.logger.lifecycle('Finished updating version within mcmod.info for ' + archivesBaseName)
}